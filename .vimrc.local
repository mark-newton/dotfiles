"*** colors and terminal settings
syntax on
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors
set background=dark
colorscheme codecourse
hi! Normal guibg=#1a1b26

"*** Settings
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab
set autoindent
set smartindent
set cin
set noshowmode
set backupdir=/tmp
let g:indentLine_enabled = 0

" Speed improvements
set redrawtime=5000
syntax sync minlines=200
syntax sync maxlines=500
set synmaxcol=200
set nocursorline
set nocursorcolumn

" Wincent settings
scriptencoding utf-8
let s:middot='·'
let s:raquo='»'
let s:small_l='ℓ'
function! WincentFoldtext() abort
  let l:lines='[' . (v:foldend - v:foldstart + 1) . s:small_l . ']'
  let l:first=substitute(getline(v:foldstart), '\v *', '', '')
  let l:dashes=substitute(v:folddashes, '-', s:middot, 'g')
  return s:raquo . s:middot . s:middot . l:lines . l:dashes . ': ' . l:first
endfunction
set diffopt+=foldcolumn:0             " don't show fold column in diff view
set fillchars+=vert:\
if has('folding')
  if has('windows')
    set fillchars=diff:∙               " BULLET OPERATOR (U+2219, UTF-8: E2 88 99)
    set fillchars+=fold:·              " MIDDLE DOT (U+00B7, UTF-8: C2 B7)
    set fillchars+=vert:┃              " BOX DRAWINGS HEAVY VERTICAL (U+2503, UTF-8: E2 94 83)
  endif
  if has('nvim-0.3.1')
    set fillchars+=eob:\              " suppress ~ at EndOfBuffer
  endif
  set foldmethod=manual               " default foldmethod - override in filetype settings
  set foldlevel=1
  set foldlevelstart=1
  set foldnestmax=2
  set foldtext=WincentFoldtext()
  set nofoldenable
endif

"*** function to toggle windows layout between horiz & vert
let g:hwin=1
func! ToggleWinLayout()
    if (g:hwin)
        wincmd H
        let g:hwin=0
    else
        wincmd K
        let g:hwin=1
    endif
endfunc

"*** function to toggle line numbers
let g:dnum=0
set nonumber
func! ToggleNumbers()
    if (g:dnum)
        set number! relativenumber!
        let g:dnum=0
    else
        set number relativenumber
        let g:dnum=1
    endif
endfunc

"*** key bindings
nnoremap <f1> K
nmap <f2> :below new<cr>
nmap <f3> :clo<cr>
set pt=<F4>
vmap <f5> gc
map <f7> <C-W>w
map <f8> :call ToggleWinLayout()<cr>
"map <f9> :set list! list? <CR>
map <f9> :IndentLinesToggle<CR>
map <f10> :call ToggleNumbers()<cr>

" Mappings: function key replacements
nmap <leader>ws :below new<cr>
nmap <leader>c :clo<cr>
nmap <leader>ww <C-w>w
nmap <leader>wl :call ToggleWinLayout()<cr>
nmap <leader>li :set list! list? <cr>
nmap <leader>ln :call ToggleNumbers()<cr>
nmap <leader>wh :below new<cr>
nmap <leader>wv :below vnew<cr>
nmap <M-b> <C-w>W
nmap <M-f> <C-w>w

" Mappings: general
map <C-n> :30Lex<CR>
nnoremap <leader>. :lcd %:p:h<CR>
"noremap <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader><space> :noh<cr>
nnoremap <leader>u :UndotreeShow<CR>
imap ii <Esc>

"*** commenting
" map ,# :s/^/#/<CR>:nohlsearch<CR>
" map ,/ :s/^/\/\//<CR>:nohlsearch<CR>
" map ," :s/^/\"/<CR>:nohlsearch<CR>
" map ,- :s/^/--/<CR>:nohlsearch<CR>
" map ,c :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohlsearch<CR>
" map <f5> :s/^/\/\//<CR>:nohlsearch<CR>
" map <f6> :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:nohlsearch<CR>

" Mappings: splits
noremap <leader>h :<C-u>split<CR>
noremap <leader>v :<C-u>vsplit<CR>
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>w
noremap <C-h> <C-w>W
nnoremap <leader>+ :vertical resize +5<CR>
nnoremap <leader>- :vertical resize -5<CR>

"*** filetypes
filetype on
au BufNewFile,BufRead *.ihtml set filetype=php
autocmd FileType php set kp=:help
au BufNewFile,BufRead *.volt set filetype=html
autocmd FileType coffee setlocal shiftwidth=2 softtabstop=2 expandtab
autocmd FileType php setlocal shiftwidth=4 softtabstop=4 expandtab foldmethod=indent

"*** folding
" let php_folding=0
" set foldnestmax=1
" noremap <space> za
set nofoldenable  "*** disable folding on load - use zi command to toggle
" au FileType php setl nofen
let g:foldstate=0
func! DoFold()
  if (!g:foldstate)
    let g:foldstate=1
    set foldenable
    nmap <space> za
  endif
endfunc
nmap <silent> <space> :call DoFold()<cr>

"*** status line
set statusline=%<%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P " legacy statusline - not used if airline active
set ttimeoutlen=50
set ls=2            "status line (2=always on)

"*** airline
let g:airline#extensions#tabline#enabled = 0
let g:airline_exclude_preview = 1
let g:airline_powerline_fonts = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme = 'zenburn'
let g:airline#extensions#hunks#enabled=0

"*** gitgutter
set updatetime=100
set signcolumn=yes

"*** syntastic (syntax checking)
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": ['php','python'],
    \ "passive_filetypes": ['html'] }
let g:syntastic_python_pylint_post_args="--max-line-length=180"
nnoremap <silent> <leader>qa :SyntasticCheck<CR>

"*** vim-surround
nmap ss ysiw
nmap sl yss
vmap s S

"*** On save, search the first 20 lines for '@modified' and update with current date
function! LastMod()
  if line("$") > 20
    let l = 20
  else
    let l = line("$")
  endif
  call cursor(1, 1)
  if search("@modified", 'W', l) > 0
    exe "1," . l . "g/@modified /s/@modified .*/@modified " . strftime("%d-%b-%Y")
  endif
endfun
autocmd BufWrite * ks|call LastMod()|'s
map <leader>mod :call LastMod()<cr>
